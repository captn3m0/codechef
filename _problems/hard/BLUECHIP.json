{"category_name":"hard","status":"success","problem_code":"BLUECHIP","problem_name":"Escape the Blue Chips","body":"### Read problems statements in [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/COOK127\/mandarin\/BLUECHIP.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/COOK127\/russian\/BLUECHIP.pdf), [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/COOK127\/vietnamese\/BLUECHIP.pdf), and [Bengali](https:\/\/www.codechef.com\/download\/translated\/COOK127\/bengali\/BLUECHIP.pdf) as well.\r\n\r\nYou are given a tree with $N$ vertices (numbered $1$ through $N$) rooted at vertex $1$. There are $M$ blue tokens (numbered $1$ through $M$) and $1$ red token. For each valid $i$, the $i$-th blue token appears at the root at an integer time $t_i$ seconds and moves to a leaf vertex $v_i$, crossing one edge per second. In the next second after reaching $v_i$, this token disappears.\r\n\r\nYou control the red token. First, given a starting time $S$, you must choose some leaf vertex of the tree and place it at this vertex at some integer time $t$ seconds such that $t \\geq S$. In one second, you can move the red token to any vertex adjacent to its current vertex. Your aim is to move the red token to vertex $1$.\r\n\r\nAt each integer moment in time, the red token is not allowed to be in the same vertex as any blue token.\r\n\r\nAdditionally, you have a hidden ability called $K$-*teleport*, which can be used any number of times. Whenever $K$-teleport is used to move the red token from its current vertex $u$ to some vertex $v$ of your choice (possibly $u$ itself), it phases out of existence (so it cannot clash with any blue token) and appears in $v$ at an integer moment in time of your choice which is **at least** $K \\cdot \\mathrm{dist}(u, v)$ seconds later. Here, $\\mathrm{dist}(u, v)$ denotes the shortest distance between vertices $u$ and $v$.\r\n\r\nFind the minimum time at which the red token can reach the root without clashing with any blue token.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains four space-separated integers $N$, $M$, $K$ and $S$.\r\n- Each of the next $N - 1$ lines contains two space-separated integers $u$ and $v$ denoting that vertices $u$ and $v$ are connected by an edge.\r\n- $M$ more lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $t_i$ and $v_i$.\r\n\r\n### Output\r\nFor each test case, print a single line containing one integer \u2015 the minimum time at which you can reach the root.\r\n\r\n### Constraints\r\n- $1 \\leq T \\leq 10^5$\r\n- $2 \\leq N \\leq 2 \\cdot 10^5$\r\n- $1 \\leq M \\leq 2 \\cdot 10^5$\r\n- $1 \\leq K \\leq 10^9$\r\n- $0 \\leq S \\leq 10^9$\r\n- $1 \\le u, v \\le N$\r\n- the graph described on the input is a tree\r\n- $0 \\leq t_i \\leq 10^9$ for each valid $i$\r\n- $1 \\leq v_i \\leq N$ for each valid $i$\r\n- $v_i$ is a leaf vertex for each valid $i$\r\n- the sum of $N$ over all test cases does not exceed $2 \\cdot 10^5$\r\n- the sum of $M$ over all test cases does not exceed $2 \\cdot 10^5$\r\n\r\n### Example Input\r\n```\r\n3\r\n4 5 3 2\r\n1 2\r\n2 3\r\n2 4\r\n3 4\r\n3 3\r\n4 4\r\n5 4\r\n6 4\r\n2 1 3 0\r\n1 2\r\n1 2\r\n4 5 6 3\r\n2 1\r\n3 2\r\n4 2\r\n1 4\r\n1 3\r\n4 4\r\n5 4\r\n7 3\r\n```\r\n\r\n### Example Output\r\n```\r\n7\r\n2\r\n8\r\n```\r\n\r\n### Explanation\r\n**Example case 1:** One of the possible solutions is shown below.\r\n\r\n<img src=\"https:\/\/espresso.codeforces.com\/1ee257d1ceb6898126a6d81c7d1d72626871030e.png\" class=\"center\" width=\"550\" height=\"250\">\r\n\r\nAt $t = 3$, you may use $3$-teleport from $2$ to $1$, arriving at vertex $1$ at the time $t = 7$, since $3 \\cdot \\mathrm{dist}(2, 1) = 3$ and $3+3 \\leq 7$.\r\n\r\n**Example case 2:** One of the possible solutions is shown below.\r\n\r\n<img src=\"https:\/\/espresso.codeforces.com\/122baf46b0be9bc50cf7aacbd4445a01a923a199.png\" class=\"center\" width=\"300\" height=\"100\">\r\n\r\n**Example case 3:** One of the possible solutions is shown below.\r\n\r\n<img src=\"https:\/\/espresso.codeforces.com\/3661369ca54f3e7fb8751e386d521f9ff3338a93.png\" class=\"center\" width=\"625\" height=\"275\">\r\n\r\nAt $t = 4$, you may use $6$-teleport from $3$ to $3$, arriving at vertex $3$ at the time $t = 6$, since $6 \\cdot \\mathrm{dist}(3, 3) = 0$ and $4+0 \\leq 6$.\r\n\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"","constraintsState":false,"subtasks":"","subtasksState":false,"statement":"### Read problems statements in [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/COOK127\/mandarin\/BLUECHIP.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/COOK127\/russian\/BLUECHIP.pdf), [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/COOK127\/vietnamese\/BLUECHIP.pdf), and [Bengali](https:\/\/www.codechef.com\/download\/translated\/COOK127\/bengali\/BLUECHIP.pdf) as well.\r\n\r\nYou are given a tree with $N$ vertices (numbered $1$ through $N$) rooted at vertex $1$. There are $M$ blue tokens (numbered $1$ through $M$) and $1$ red token. For each valid $i$, the $i$-th blue token appears at the root at an integer time $t_i$ seconds and moves to a leaf vertex $v_i$, crossing one edge per second. In the next second after reaching $v_i$, this token disappears.\r\n\r\nYou control the red token. First, given a starting time $S$, you must choose some leaf vertex of the tree and place it at this vertex at some integer time $t$ seconds such that $t \\geq S$. In one second, you can move the red token to any vertex adjacent to its current vertex. Your aim is to move the red token to vertex $1$.\r\n\r\nAt each integer moment in time, the red token is not allowed to be in the same vertex as any blue token.\r\n\r\nAdditionally, you have a hidden ability called $K$-*teleport*, which can be used any number of times. Whenever $K$-teleport is used to move the red token from its current vertex $u$ to some vertex $v$ of your choice (possibly $u$ itself), it phases out of existence (so it cannot clash with any blue token) and appears in $v$ at an integer moment in time of your choice which is **at least** $K \\cdot \\mathrm{dist}(u, v)$ seconds later. Here, $\\mathrm{dist}(u, v)$ denotes the shortest distance between vertices $u$ and $v$.\r\n\r\nFind the minimum time at which the red token can reach the root without clashing with any blue token.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains four space-separated integers $N$, $M$, $K$ and $S$.\r\n- Each of the next $N - 1$ lines contains two space-separated integers $u$ and $v$ denoting that vertices $u$ and $v$ are connected by an edge.\r\n- $M$ more lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $t_i$ and $v_i$.\r\n\r\n### Output\r\nFor each test case, print a single line containing one integer \u2015 the minimum time at which you can reach the root.\r\n\r\n### Constraints\r\n- $1 \\leq T \\leq 10^5$\r\n- $2 \\leq N \\leq 2 \\cdot 10^5$\r\n- $1 \\leq M \\leq 2 \\cdot 10^5$\r\n- $1 \\leq K \\leq 10^9$\r\n- $0 \\leq S \\leq 10^9$\r\n- $1 \\le u, v \\le N$\r\n- the graph described on the input is a tree\r\n- $0 \\leq t_i \\leq 10^9$ for each valid $i$\r\n- $1 \\leq v_i \\leq N$ for each valid $i$\r\n- $v_i$ is a leaf vertex for each valid $i$\r\n- the sum of $N$ over all test cases does not exceed $2 \\cdot 10^5$\r\n- the sum of $M$ over all test cases does not exceed $2 \\cdot 10^5$","inputFormat":"","inputFormatState":false,"outputFormat":"","outputFormatState":false,"sampleTestCases":[{"id":"1","input":"3\r\n4 5 3 2\r\n1 2\r\n2 3\r\n2 4\r\n3 4\r\n3 3\r\n4 4\r\n5 4\r\n6 4\r\n2 1 3 0\r\n1 2\r\n1 2\r\n4 5 6 3\r\n2 1\r\n3 2\r\n4 2\r\n1 4\r\n1 3\r\n4 4\r\n5 4\r\n7 3","output":"7\r\n2\r\n8","explanation":"**Example case 1:** One of the possible solutions is shown below.\r\n\r\n<img src=\"https:\/\/espresso.codeforces.com\/1ee257d1ceb6898126a6d81c7d1d72626871030e.png\" class=\"center\" width=\"550\" height=\"250\">\r\n\r\nAt $t = 3$, you may use $3$-teleport from $2$ to $1$, arriving at vertex $1$ at the time $t = 7$, since $3 \\cdot \\mathrm{dist}(2, 1) = 3$ and $3+3 \\leq 7$.\r\n\r\n**Example case 2:** One of the possible solutions is shown below.\r\n\r\n<img src=\"https:\/\/espresso.codeforces.com\/122baf46b0be9bc50cf7aacbd4445a01a923a199.png\" class=\"center\" width=\"300\" height=\"100\">\r\n\r\n**Example case 3:** One of the possible solutions is shown below.\r\n\r\n<img src=\"https:\/\/espresso.codeforces.com\/3661369ca54f3e7fb8751e386d521f9ff3338a93.png\" class=\"center\" width=\"625\" height=\"275\">\r\n\r\nAt $t = 4$, you may use $6$-teleport from $3$ to $3$, arriving at vertex $3$ at the time $t = 6$, since $6 \\cdot \\mathrm{dist}(3, 3) = 0$ and $4+0 \\leq 6$.","isDeleted":false}]},"video_editorial_url":"https:\/\/youtu.be\/f6IXBls4M6c","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, SQLQ, NEM","max_timelimit":"3.5","source_sizelimit":"50000","problem_author":"fairy_winx","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FFBF00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>5&#9733;<\/span><span class='m-username--link'>fairy_winx<\/span>","problem_tester":"","problem_tester_html_handle":"","date_added":"21-03-2021","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/cook127'>cook127<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/dynamic-programming'>dynamic-programming<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/fairy_winx'>fairy_winx<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/medium-hard'>medium-hard<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/treap'>treap<\/a>","problem_difficulty_level":"Medium-Hard","user_zen_mode":false,"best_tag":"Dynamic Programming","editorial_url":"https:\/\/discuss.codechef.com\/problems\/BLUECHIP","time":{"view_start_date":1616351402,"submit_start_date":1616351402,"visible_start_date":1616351402,"end_date":1735669800,"current":1643797991},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=BLUECHIP","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}