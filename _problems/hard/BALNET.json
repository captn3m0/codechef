{"category_name":"hard","status":"success","problem_code":"BALNET","problem_name":"Balancing Network Revisited","body":"### Read problem statements in [Hindi](https:\/\/www.codechef.com\/download\/translated\/FEB20\/hindi\/BALNET.pdf), [Bengali](https:\/\/www.codechef.com\/download\/translated\/FEB20\/bengali\/BALNET.pdf), [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/FEB20\/mandarin\/BALNET.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/FEB20\/russian\/BALNET.pdf), and [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/FEB20\/vietnamese\/BALNET.pdf) as well.\r\n\r\nConsider $N$ parallel wires running from left to right. The wires are numbered $1$ through $N$ from top to bottom. There are $M$ devices called *balancers*, numbered $1$ through $M$ from left to right. For each valid $i$, balancer $i$ connects wires $x_i$ and $y_i$ ($x_i \\lt y_i$). Let's call such a structure of wires and balancers a *balancing network*.\r\n\r\n<center><img src=\"https:\/\/codechef_shared.s3.amazonaws.com\/download\/Images\/FEB20\/BALNET\/netw.png\" \/><\/center>\r\n\r\nEach balancer can be directed either upwards or downwards. The directions of all balancers define the state of the balancing network.\r\n\r\nConsider a token that starts moving to the right along some wire, from a point on that wire which is to the left of all balancers. During this process, the token encounters each balancer exactly once. Whenever the token encounters a balancer $i$, the following happens:\r\n- if the token is moving along the wire $x_i$ and balancer $i$ is directed downwards, the token moves down to the wire $y_i$\r\n- otherwise, if the token is moving along the wire $y_i$ and balancer $i$ is directed upwards, the token moves up to the wire $x_i$\r\n- in all other cases, the token does not move to a different wire\r\n- afterwards, the token keeps moving to the right\r\n\r\nWe say that a state of the balancing network:\r\n- *transforms* a wire $i$ into a wire $j$, if a token that starts moving along the wire $i$ ends up on the wire $j$ after passing through all $M$ balancers\r\n- *unifies* wires $i$ and $j$, if it transforms both of these wires into the same wire (possibly different from each of them)\r\n- is $k$*-non-unifying*, if there is a set of $k$ distinct wires such that this state does not unify any pair of wires from this set\r\n\r\nFor a given balancing network, please find any $\\left\\lceil \\frac{N}{2} \\right\\rceil$-non-unifying state or determine that there is no such state.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains two space-separated integers $N$ and $M$.\r\n- $M$ lines follow. For each $i$ ($1 \\le i \\le M$), the $i$-th of these lines contains two space-separated integers $x_i$ and $y_i$.\r\n\r\n### Output\r\nFor each test case:\r\n- If there is no $\\left\\lceil \\frac{N}{2} \\right\\rceil$-non-unifying state for the given balancing network, print a single line containing the string `\"failure\"` (without quotes).\r\n- Otherwise, print a single line containing a string with length $M$. This string should describe some $\\left\\lceil \\frac{N}{2} \\right\\rceil$-non-unifying state. For each valid $i$, its $i$-th character should be either '^' if the $i$-th balancer is directed upwards or 'v' if the $i$-th balancer is directed downwards.\r\n\r\n### Constraints\r\n- $1 \\le T \\le 10^3$\r\n- $2 \\le N \\le 10^6$\r\n- $1 \\le M \\le 10^6$\r\n- $1 \\le x_i \\lt y_i \\le N$ for each valid $i$\r\n- the sum of $N$ over all test cases does not exceed $10^6$\r\n- the sum of $M$ over all test cases does not exceed $10^6$\r\n\r\n### Subtasks\r\n**Subtask #1 (7 points):** $M \\le 10$\r\n\r\n**Subtask #2 (14 points):**\r\n- $N \\le 10$\r\n- $M \\le 10^3$\r\n- the sum of $M$ over all test cases does not exceed $10^4$\r\n\r\n**Subtask #3 (29 points):** $N, M \\le 100$\r\n\r\n**Subtask #4 (50 points):** original constraints\r\n\r\n### Example Input\r\n```\r\n2\r\n3 3\r\n1 2\r\n2 3\r\n1 3\r\n5 6\r\n1 2\r\n3 4\r\n1 3\r\n2 4\r\n2 3\r\n1 4\r\n```\r\n\r\n### Example Output\r\n```\r\n^^^\r\nv^vv^v\r\n```\r\n\t\r\n### Explanation\r\n**Example case 1:** The state where all balancers are directed upwards (\"^^^\") transforms wire $1$ into itself, wire $2$ into wire $1$ and wire $3$ into wire $2$. We can see that this state does not unify wires $1$ and $3$ (or wires $2$ and $3$), thus it is $2$-non-unifying. Another $2$-non-unifying state of this balancing network is \"^^v\". The remaining $6$ states are not $2$-non-unifying.\r\n\r\n**Example case 2:**\r\n<center><img src=\"https:\/\/codechef_shared.s3.amazonaws.com\/download\/Images\/FEB20\/BALNET\/sample.png\" \/><\/center>\r\n\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"","constraintsState":false,"subtasks":"","subtasksState":false,"statement":"### Read problem statements in [Hindi](https:\/\/www.codechef.com\/download\/translated\/FEB20\/hindi\/BALNET.pdf), [Bengali](https:\/\/www.codechef.com\/download\/translated\/FEB20\/bengali\/BALNET.pdf), [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/FEB20\/mandarin\/BALNET.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/FEB20\/russian\/BALNET.pdf), and [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/FEB20\/vietnamese\/BALNET.pdf) as well.\r\n\r\nConsider $N$ parallel wires running from left to right. The wires are numbered $1$ through $N$ from top to bottom. There are $M$ devices called *balancers*, numbered $1$ through $M$ from left to right. For each valid $i$, balancer $i$ connects wires $x_i$ and $y_i$ ($x_i \\lt y_i$). Let's call such a structure of wires and balancers a *balancing network*.\r\n\r\n<center><img src=\"https:\/\/codechef_shared.s3.amazonaws.com\/download\/Images\/FEB20\/BALNET\/netw.png\" \/><\/center>\r\n\r\nEach balancer can be directed either upwards or downwards. The directions of all balancers define the state of the balancing network.\r\n\r\nConsider a token that starts moving to the right along some wire, from a point on that wire which is to the left of all balancers. During this process, the token encounters each balancer exactly once. Whenever the token encounters a balancer $i$, the following happens:\r\n- if the token is moving along the wire $x_i$ and balancer $i$ is directed downwards, the token moves down to the wire $y_i$\r\n- otherwise, if the token is moving along the wire $y_i$ and balancer $i$ is directed upwards, the token moves up to the wire $x_i$\r\n- in all other cases, the token does not move to a different wire\r\n- afterwards, the token keeps moving to the right\r\n\r\nWe say that a state of the balancing network:\r\n- *transforms* a wire $i$ into a wire $j$, if a token that starts moving along the wire $i$ ends up on the wire $j$ after passing through all $M$ balancers\r\n- *unifies* wires $i$ and $j$, if it transforms both of these wires into the same wire (possibly different from each of them)\r\n- is $k$*-non-unifying*, if there is a set of $k$ distinct wires such that this state does not unify any pair of wires from this set\r\n\r\nFor a given balancing network, please find any $\\left\\lceil \\frac{N}{2} \\right\\rceil$-non-unifying state or determine that there is no such state.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains two space-separated integers $N$ and $M$.\r\n- $M$ lines follow. For each $i$ ($1 \\le i \\le M$), the $i$-th of these lines contains two space-separated integers $x_i$ and $y_i$.\r\n\r\n### Output\r\nFor each test case:\r\n- If there is no $\\left\\lceil \\frac{N}{2} \\right\\rceil$-non-unifying state for the given balancing network, print a single line containing the string `\"failure\"` (without quotes).\r\n- Otherwise, print a single line containing a string with length $M$. This string should describe some $\\left\\lceil \\frac{N}{2} \\right\\rceil$-non-unifying state. For each valid $i$, its $i$-th character should be either '^' if the $i$-th balancer is directed upwards or 'v' if the $i$-th balancer is directed downwards.\r\n\r\n### Constraints\r\n- $1 \\le T \\le 10^3$\r\n- $2 \\le N \\le 10^6$\r\n- $1 \\le M \\le 10^6$\r\n- $1 \\le x_i \\lt y_i \\le N$ for each valid $i$\r\n- the sum of $N$ over all test cases does not exceed $10^6$\r\n- the sum of $M$ over all test cases does not exceed $10^6$\r\n\r\n### Subtasks\r\n**Subtask #1 (7 points):** $M \\le 10$\r\n\r\n**Subtask #2 (14 points):**\r\n- $N \\le 10$\r\n- $M \\le 10^3$\r\n- the sum of $M$ over all test cases does not exceed $10^4$\r\n\r\n**Subtask #3 (29 points):** $N, M \\le 100$\r\n\r\n**Subtask #4 (50 points):** original constraints\r\n\r\n### Example Input\r\n```\r\n2\r\n3 3\r\n1 2\r\n2 3\r\n1 3\r\n5 6\r\n1 2\r\n3 4\r\n1 3\r\n2 4\r\n2 3\r\n1 4\r\n```\r\n\r\n### Example Output\r\n```\r\n^^^\r\nv^vv^v\r\n```\r\n\t\r\n### Explanation\r\n**Example case 1:** The state where all balancers are directed upwards (\"^^^\") transforms wire $1$ into itself, wire $2$ into wire $1$ and wire $3$ into wire $2$. We can see that this state does not unify wires $1$ and $3$ (or wires $2$ and $3$), thus it is $2$-non-unifying. Another $2$-non-unifying state of this balancing network is \"^^v\". The remaining $6$ states are not $2$-non-unifying.\r\n\r\n**Example case 2:**\r\n<center><img src=\"https:\/\/codechef_shared.s3.amazonaws.com\/download\/Images\/FEB20\/BALNET\/sample.png\" \/><\/center>\r\n","inputFormat":"","inputFormatState":false,"outputFormat":"","outputFormatState":false,"sampleTestCases":[]},"video_editorial_url":"","languages_supported":"CPP14, C, JAVA, PYTH 3.6, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM","max_timelimit":"1","source_sizelimit":"50000","problem_author":"alex_2oo8","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #D0011B;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>7&#9733;<\/span><span class='m-username--link'>alex_2oo8<\/span>","problem_tester":null,"problem_tester_html_handle":"","date_added":"7-01-2020","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/alex_2oo8'>alex_2oo8<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/feb20'>feb20<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/hard'>hard<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/observation'>observation<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/tmwilliamlin'>tmwilliamlin<\/a>","problem_difficulty_level":"Hard","user_zen_mode":false,"best_tag":"","editorial_url":"https:\/\/discuss.codechef.com\/problems\/BALNET","time":{"view_start_date":1581931802,"submit_start_date":1581931802,"visible_start_date":1581931802,"end_date":1735669800,"current":1643797991},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=BALNET","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}