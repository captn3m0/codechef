{"category_name":"easy","status":"success","problem_code":"GRIDPA","problem_name":"Grid Path","body":"There is a grid containing $N$ rows and $N$ columns. The cell at the $i^{th}$ row from the top and $j^{th}$ column from the left is a passable space if $S_{i,j}$ is `'.'` and a blocked cell if $S_{i,j}$ is `'#'`. \n\nChef is at the top-left cell and wants to reach the bottom-right cell. Chef can move one cell down, or right to a passable cell. He can't leave the grid. If Chef is at the cell $(i,j)$, he can collect $A_{i,j}$ coins. \n\nNow, Chef has a special ability using which he can make all the blocked cells in a path of length $K$ into passable cells. Chef uses this ability before moving from the top-left cell. It is possible that **some of the cells in the chosen $K$ length path are already passable**. More formally, Chef can choose a sequence of $K$ cells such that for each $i$ $(1 \\leq i \\lt K)$, the $i^{th}$ and $(i+1)^{th}$ cells of the sequence are **adjacent** and make all these $K$ cells passable.\n\nFind the maximum amount of coins Chef can collect in the path from the top-left cell to the bottom-right cell. Print $-1$ if it is impossible to reach the bottom-right cell.\n\n\n**Note**: Two cells are considered to be *adjacent* if they share a common side. The cell $(i, j)$ has four adjacent cells i.e. the cells $(i - 1, j)$, $(i + 1, j)$, $(i, j - 1)$ and $(i, j + 1)$. It is guaranteed that the top-left cell of the grid is a passable cell.\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"- $1 \\leq T \\leq 4 \\cdot 10^3$\n- $2 \\leq N \\leq 150$\n- $0 \\leq K \\leq 2 \\cdot N - 2$\n- $1 \\leq A_{i,j} \\leq 10^5$\n- $S_{i,j}$ is either `'.'`  or `'#'`.\n- It is guaranteed that the top-left cell of the grid is a passable cell.\n- Sum $N^2$ over all testcases does not exceed $3 \\cdot 10^5$.\n","constraintsState":true,"subtasks":"","subtasksState":false,"statement":"There is a grid containing $N$ rows and $N$ columns. The cell at the $i^{th}$ row from the top and $j^{th}$ column from the left is a passable space if $S_{i,j}$ is `'.'` and a blocked cell if $S_{i,j}$ is `'#'`. \n\nChef is at the top-left cell and wants to reach the bottom-right cell. Chef can move one cell down, or right to a passable cell. He can't leave the grid. If Chef is at the cell $(i,j)$, he can collect $A_{i,j}$ coins. \n\nNow, Chef has a special ability using which he can make all the blocked cells in a path of length $K$ into passable cells. Chef uses this ability before moving from the top-left cell. It is possible that **some of the cells in the chosen $K$ length path are already passable**. More formally, Chef can choose a sequence of $K$ cells such that for each $i$ $(1 \\leq i \\lt K)$, the $i^{th}$ and $(i+1)^{th}$ cells of the sequence are **adjacent** and make all these $K$ cells passable.\n\nFind the maximum amount of coins Chef can collect in the path from the top-left cell to the bottom-right cell. Print $-1$ if it is impossible to reach the bottom-right cell.\n\n\n**Note**: Two cells are considered to be *adjacent* if they share a common side. The cell $(i, j)$ has four adjacent cells i.e. the cells $(i - 1, j)$, $(i + 1, j)$, $(i, j - 1)$ and $(i, j + 1)$. It is guaranteed that the top-left cell of the grid is a passable cell.","inputFormat":"The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains two space-separated integers $N, K$.\n- $N$  lines follow. The $i^{th}$ of these lines contains a string $S_i$ of length $N$. The $j^{th}$ character of $S_i$ is `'.'` if the cell $(i, j)$ is passable, or `'#'` if it is a blocked cell. \n- Next $N$ lines follow. The $i^{th}$ of these lines contains $N$ space-separated integers  $A_{i,j}$, denoting the number of coins in the cell $(i, j)$.","inputFormatState":true,"outputFormat":"For each test case, print a single line containing one integer - the maximum amount of coin Chef can collect in the path or $-1$ if it is impossible to reach the bottom-right cell.","outputFormatState":true,"sampleTestCases":[{"id":"1","input":"3\n2 1\n.#\n#.\n1 2\n3 4\n3 3\n.#.\n#.#\n..#\n1 1 1\n1 1 1\n1 1 1\n5 4 \n.....\n#####\n.....\n#####\n.....\n2 3 4 1 5\n1 7 15 12 2\n2 5 10 8 3\n9 9 9 9 9\n1 2 3 4 5\n","output":"8\n-1\n62\n","explanation":"**Test case $1$:** Chef breaks the blocked cell $(2, 1)$ and choose the path -\n$\\;(1, 1) \\rightarrow (2, 1) \\rightarrow (2,2)$. Total coins collected in the path is $1 + 3 + 4 = 8$.\n\n**Test case $2$:** There is no way to choose a path of length $3$ such that after breaking the blocked cells in the path, it is possible to reach the bottom-right cell.\n\n**Test case $3$:** Chef chooses the path of consisting of cells $(2, 3),$ $(2, 4)$, $(3, 4)$, $(4, 4)$ and break the blocked cells in this path. Then Chef chooses the path - $(1, 1) \\rightarrow (1, 2) \\rightarrow (1,3) \\rightarrow (2, 3) \\rightarrow (2, 4) \\rightarrow (3, 4) \\rightarrow (4, 4) \\rightarrow (5, 4)$ $\\;\\rightarrow (5, 5)$. Total coins collected in the path is $2 + 3 + 4$ $\\;+ 15 + 12 + 8$ $\\;+ 9 + 4 + 5  = 62$.","isDeleted":false}]},"video_editorial_url":"https:\/\/youtu.be\/6QIeLiRuODY","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, SQLQ, NEM","max_timelimit":"1","source_sizelimit":"50000","problem_author":"soumyadeep_21","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FFBF00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>5&#9733;<\/span><span class='m-username--link'>soumyadeep_21<\/span>","problem_tester":"","problem_tester_html_handle":"","date_added":"25-08-2021","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/dynamic-programming'>dynamic-programming<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/dynamic-programming'>dynamic-programming<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/easy'>easy<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/easy'>easy<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/soumyadeep_21'>soumyadeep_21<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/start10'>start10<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/start10'>start10<\/a>","problem_difficulty_level":"Unavailable","user_zen_mode":false,"best_tag":"Dynamic Programming","editorial_url":"https:\/\/discuss.codechef.com\/problems\/GRIDPA","time":{"view_start_date":1630243800,"submit_start_date":1630243800,"visible_start_date":1630243800,"end_date":1735669800,"current":1643797818},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=GRIDPA","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}