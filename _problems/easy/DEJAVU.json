{"category_name":"easy","status":"success","problem_code":"DEJAVU","problem_name":"Deja Vu","body":"You're given a sequence of $N$ - **distinct** positive integers, not necessarily sorted in ascending order. Your task is pretty straightforward: sort the sequence in ascending order. At any point of time, you can perform one of the following operations:\n\n- If there is only one sequence, with a length greater than $1$, **split** it at some point to divide it into two non-empty sequences. The cost to perform this operation is the minimum of the sizes of the two broken parts.\n\n- If there are multiple sequences (due to one or more split operations in the past), you may choose one of them with a length greater than $1$ and split it at some point to divide it into two non-empty sequences. The cost to perform this operation is the minimum of the sizes of the two broken parts.\n\n- If there are multiple sequences (due to one or more split operations in the past), you may choose two of them and **concatenate** them in any order. The cost to perform this operation is the length of the resulting sequence, i.e., the sum of the lengths of the first and the second part.\n\nIt turns out that there are a LOT of ways to sort the array by following this scheme! You need to find out the minimum cost of all the operations required to sort the array in the optimal manner.\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 200$\n- $1 \\leq A_i \\leq 10^6$\n","constraintsState":true,"subtasks":"- 30 points : $1 \\leq R \\leq 10000$\n- 70 points : $1 \\leq R \\leq 10^9$\n","subtasksState":false,"statement":"You're given a sequence of $N$ - **distinct** positive integers, not necessarily sorted in ascending order. Your task is pretty straightforward: sort the sequence in ascending order. At any point of time, you can perform one of the following operations:\n\n- If there is only one sequence, with a length greater than $1$, **split** it at some point to divide it into two non-empty sequences. The cost to perform this operation is the minimum of the sizes of the two broken parts.\n\n- If there are multiple sequences (due to one or more split operations in the past), you may choose one of them with a length greater than $1$ and split it at some point to divide it into two non-empty sequences. The cost to perform this operation is the minimum of the sizes of the two broken parts.\n\n- If there are multiple sequences (due to one or more split operations in the past), you may choose two of them and **concatenate** them in any order. The cost to perform this operation is the length of the resulting sequence, i.e., the sum of the lengths of the first and the second part.\n\nIt turns out that there are a LOT of ways to sort the array by following this scheme! You need to find out the minimum cost of all the operations required to sort the array in the optimal manner.","inputFormat":"- Each test file contains multiple test cases. The first line contains the number of test cases, $T$. Description of the test cases follows.\n- The first line of each test case contains a single integer $N$, the length of the array.\n- The second line of each test case contains $N$ space-separated integers, the elements of the array.","inputFormatState":true,"outputFormat":"For each test case, output in a single line, the minimum cost of operations that is required to sort the array according to the given scheme.","outputFormatState":true,"sampleTestCases":[{"id":"1","input":"2\n5\n1 2 4 5 3\n5\n1 2 3 4 5","output":"11\n0","explanation":"- In the first test case, we can achieve an optimal cost of $11$ with the following sequence of operations:\n- First split the sequence $[1, 2, 4, 5, 3]$ between $5$ and $3$ into two new sequences: $[1, 2, 4, 5]$ and $[3]$. We have two sequences now: $\\{[1, 2, 4, 5], [3]\\}$. The cost to perform this operation is $min(length([1, 2, 4, 5]),\\ length([3]))$ = $min(4, 1)$ = $1$.\n- Now, split the sequence $[1, 2, 4, 5]$ between $2$ and $4$ into two new sequences: $[1, 2]$ and $[4, 5]$. We have three sequences now: $\\{[1, 2], [4, 5], [3]\\}$. The cost to perform this operation is $min(length([1, 2]),\\ length([4, 5]))$ = $min(2, 2)$ = $2$.\n- Now, concatenate the sequences $[3]$ and $[4, 5]$ in this order to form a new sequence: $[3, 4, 5]$. We have two sequences now: $\\{[1, 2], [3, 4, 5]\\}$. The cost to perform this operation is $length([3]) + length([4, 5])$ = $1 + 2$ = $3$.\n- Now, concatenate the sequences $[1, 2]$ and $[3, 4, 5]$ in this order to form a new sequence: $[1, 2, 3, 4, 5]$. We have one sequence now: $[1, 2, 3, 4, 5]$, which is sorted as desired. The cost to perform this operation is $length([1, 2]) + length([3, 4, 5])$ = $2 + 3$ = $5$.\n- Hence, the total cost = $1 + 2 + 3 + 5$ = $11$.\n- In the second test case, we notice that the sequence is already in ascending order. Hence, we need not do any operations. The total cost is $0$, without a scratch.","isDeleted":false}]},"video_editorial_url":"","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, SQLQ, NEM","max_timelimit":"1","source_sizelimit":"50000","problem_author":"hitch_hiker42","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;<\/span><span class='m-username--link'>hitch_hiker42<\/span>","problem_tester":"","problem_tester_html_handle":"","date_added":"12-08-2021","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/cdmn2021'>cdmn2021<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/dynamic-programming'>dynamic-programming<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/greedy'>greedy<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/hitch_hiker42'>hitch_hiker42<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/medium'>medium<\/a>","problem_difficulty_level":"Medium","user_zen_mode":false,"best_tag":"Dynamic Programming","editorial_url":"https:\/\/discuss.codechef.com\/problems\/DEJAVU","time":{"view_start_date":1630603800,"submit_start_date":1630603800,"visible_start_date":1630603800,"end_date":1735669800,"current":1643797799},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=DEJAVU","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}