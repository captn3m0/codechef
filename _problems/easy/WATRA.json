{"category_name":"easy","status":"success","problem_code":"WATRA","problem_name":"Water Transfer","body":"### Read problems statements in [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/COOK127\/mandarin\/WATRA.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/COOK127\/russian\/WATRA.pdf), [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/COOK127\/vietnamese\/WATRA.pdf), and [Bengali](https:\/\/www.codechef.com\/download\/translated\/COOK127\/bengali\/WATRA.pdf) as well.\r\n\r\nThe city of Hunterland can be represented as a grid with $N$ rows (numbered $1$ through $N$) and $M$ columns (numbered $1$ through $M$). Let's denote a cell in row $r$ and column $c$ by $(r,c)$. Ahmet, the mayor, plans to develop the underground water system of Hunterland.\r\n\r\nThere is a large reservoir of water in the cell $(1, 1)$. Water from the reservoir must reach the cell $(N, M)$ through a simple path in a network of underground pipes. From each cell $(i,j)$, water flows out through a one-directional pipe with a given capacity $a_{i,j}$ and direction $d_{i,j}$ (up, down, left or right), either to a side-adjacent cell or out of the grid. At any moment, a pipe cannot hold more water than its capacity. Each cell, however, can receive water from any number of adjacent cells; in particular, there can be pairs of cells which send water directly to each other through two pipes with opposite directions.\r\n\r\nDue to poor planning of the previous mayor, the $N \\cdot M$ pipes do not have optimal capacities or directions. Ahmet employs Faruk the engineer to rectify this network. Faruk does not have much time, so he may only perform up to $K$ operations. In each operation, he should:\r\n- choose some outgoing pipe with positive capacity\r\n- decrease its capacity by $1$\r\n- rotate it 90 degrees clockwise, i.e. change its direction in one of the following ways: up to right, right to down, down to left or left to up\r\n\r\nFaruk's goal is to maximise the amount of water that can be sent from the cell $(1,1)$ to the cell $(N,M)$ per unit of time. Specifically, for each simple path along pipes from the cell $(1, 1)$ to $(N, M)$ in the final network, consider the minimum of capacities of pipes in this path; the amount of water that can be sent from $(1, 1)$ to $(N, M)$ per unit of time is the maximum of these minimum values, or $0$ if there is no valid path. Help Faruk determine this maximum possible amount of water that can be sent from the cell $(1,1)$ to the cell $(N,M)$.\r\n\r\nNote that it is not required to minimise the number of clockwise rotations. Also note that the capacity and direction of the pipe from the cell $(N, M)$ do not affect the answer, but have been given on the input for uniformity.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains three space-separated integers $N$, $M$ and $K$.\r\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains $M$ space-separated integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,M}$.\r\n- $N$ more lines follow. For each valid $i$, the $i$-th of these lines contains a single string with length $M$; for each valid $j$, the $j$-th character of this string denotes the direction $d_{i,j}$ of the pipe from the cell $(i,j)$:\r\n    - 'U' denotes an outgoing pipe directed upwards \u2015 to the cell $(i-1, j)$\r\n    - 'R' denotes an outgoing pipe directed to the right \u2015 to the cell $(i, j+1)$\r\n    - 'D' denotes an outgoing pipe directed downwards \u2015 to the cell $(i+1, j)$\r\n    - 'L' denotes an outgoing pipe directed to the left \u2015 to the cell $(i, j-1)$\r\n\r\n### Output\r\nFor each test case, print a single line containing one integer \u2015 the maximum amount of water that can reach the cell $(N, M)$ per unit of time.\r\n\r\n### Constraints\r\n- $1 \\leq T \\leq 160,000$\r\n- $1 \\leq N, M \\leq 400$\r\n- $2 \\leq N \\cdot M$\r\n- $0 \\leq K \\leq 10^9$\r\n- $4 \\leq a_{i,j} \\leq 10^9$ for each valid $i,j$\r\n- $d_{i,j}$ is 'U', 'R', 'D', or 'L' for each valid $i,j$\r\n- the sum of $N \\cdot M$ over all test cases does not exceed $160,000$\r\n\r\n### Example Input 1\r\n```\r\n1\r\n3 3 1\r\n4 4 4\r\n5 4 4\r\n4 8 4\r\nDRR\r\nDUU\r\nURL\r\n```\r\n\r\n### Example Output 1\r\n```\r\n3\r\n```\r\n\r\n### Explanation\r\n**Example case 1:** Water can flow from $(1,1)$ down to $(2,1)$, then again down to $(3,1)$, then right to $(3,2)$ and again right to $(3,3)$. Since the initial direction of the pipe from the cell $(3,1)$ is upwards, we need to change it using one operation; after this operation, it is directed right and its capacity is $3$. All other pipes have correct directions. This path gives the maximum possible amount of water, which is $3$.\r\n\r\n### Example Input 2\r\n```\r\n4\r\n1 2 3\r\n5 100\r\nDL\r\n2 1 0\r\n100\r\n5\r\nD\r\nL\r\n1 2 1\r\n10 10\r\nLR\r\n3 3 5\r\n10 20 4\r\n9 8 6\r\n16 15 12\r\nRRD\r\nRDD\r\nLDU\r\n```\r\n\r\n### Example Output 2\r\n```\r\n2\r\n100\r\n0\r\n8\r\n```\r\n\r\n### Example Input 3\r\n```\r\n4\r\n3 3 1000000000\r\n4776 15202 12355\r\n14820 996 21033\r\n32699 5719 31549\r\nULL\r\nLLR\r\nRLD\r\n3 3 1000000000\r\n10475 8939 23763\r\n25687 26437 9851\r\n4998 1101 8817\r\nDRU\r\nLRL\r\nRDD\r\n3 3 1000000000\r\n14671 3820 23657\r\n18786 215 9033\r\n21941 21658 11038\r\nUDU\r\nLRU\r\nLRD\r\n3 3 1000000000\r\n15180 16030 2171\r\n32602 28043 31232\r\n8501 4294 29114\r\nUDR\r\nDLL\r\nRDD\r\n```\r\n\r\n### Example Output 3\r\n```\r\n4775\r\n9848\r\n14669\r\n15179\r\n```\r\n\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"","constraintsState":false,"subtasks":"","subtasksState":false,"statement":"### Read problems statements in [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/COOK127\/mandarin\/WATRA.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/COOK127\/russian\/WATRA.pdf), [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/COOK127\/vietnamese\/WATRA.pdf), and [Bengali](https:\/\/www.codechef.com\/download\/translated\/COOK127\/bengali\/WATRA.pdf) as well.\r\n\r\nThe city of Hunterland can be represented as a grid with $N$ rows (numbered $1$ through $N$) and $M$ columns (numbered $1$ through $M$). Let's denote a cell in row $r$ and column $c$ by $(r,c)$. Ahmet, the mayor, plans to develop the underground water system of Hunterland.\r\n\r\nThere is a large reservoir of water in the cell $(1, 1)$. Water from the reservoir must reach the cell $(N, M)$ through a simple path in a network of underground pipes. From each cell $(i,j)$, water flows out through a one-directional pipe with a given capacity $a_{i,j}$ and direction $d_{i,j}$ (up, down, left or right), either to a side-adjacent cell or out of the grid. At any moment, a pipe cannot hold more water than its capacity. Each cell, however, can receive water from any number of adjacent cells; in particular, there can be pairs of cells which send water directly to each other through two pipes with opposite directions.\r\n\r\nDue to poor planning of the previous mayor, the $N \\cdot M$ pipes do not have optimal capacities or directions. Ahmet employs Faruk the engineer to rectify this network. Faruk does not have much time, so he may only perform up to $K$ operations. In each operation, he should:\r\n- choose some outgoing pipe with positive capacity\r\n- decrease its capacity by $1$\r\n- rotate it 90 degrees clockwise, i.e. change its direction in one of the following ways: up to right, right to down, down to left or left to up\r\n\r\nFaruk's goal is to maximise the amount of water that can be sent from the cell $(1,1)$ to the cell $(N,M)$ per unit of time. Specifically, for each simple path along pipes from the cell $(1, 1)$ to $(N, M)$ in the final network, consider the minimum of capacities of pipes in this path; the amount of water that can be sent from $(1, 1)$ to $(N, M)$ per unit of time is the maximum of these minimum values, or $0$ if there is no valid path. Help Faruk determine this maximum possible amount of water that can be sent from the cell $(1,1)$ to the cell $(N,M)$.\r\n\r\nNote that it is not required to minimise the number of clockwise rotations. Also note that the capacity and direction of the pipe from the cell $(N, M)$ do not affect the answer, but have been given on the input for uniformity.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains three space-separated integers $N$, $M$ and $K$.\r\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains $M$ space-separated integers $a_{i,1}, a_{i,2}, \\ldots, a_{i,M}$.\r\n- $N$ more lines follow. For each valid $i$, the $i$-th of these lines contains a single string with length $M$; for each valid $j$, the $j$-th character of this string denotes the direction $d_{i,j}$ of the pipe from the cell $(i,j)$:\r\n    - 'U' denotes an outgoing pipe directed upwards \u2015 to the cell $(i-1, j)$\r\n    - 'R' denotes an outgoing pipe directed to the right \u2015 to the cell $(i, j+1)$\r\n    - 'D' denotes an outgoing pipe directed downwards \u2015 to the cell $(i+1, j)$\r\n    - 'L' denotes an outgoing pipe directed to the left \u2015 to the cell $(i, j-1)$\r\n\r\n### Output\r\nFor each test case, print a single line containing one integer \u2015 the maximum amount of water that can reach the cell $(N, M)$ per unit of time.\r\n\r\n### Constraints\r\n- $1 \\leq T \\leq 160,000$\r\n- $1 \\leq N, M \\leq 400$\r\n- $2 \\leq N \\cdot M$\r\n- $0 \\leq K \\leq 10^9$\r\n- $4 \\leq a_{i,j} \\leq 10^9$ for each valid $i,j$\r\n- $d_{i,j}$ is 'U', 'R', 'D', or 'L' for each valid $i,j$\r\n- the sum of $N \\cdot M$ over all test cases does not exceed $160,000$\r\n\r\n### Example Input 1\r\n```\r\n1\r\n3 3 1\r\n4 4 4\r\n5 4 4\r\n4 8 4\r\nDRR\r\nDUU\r\nURL\r\n```\r\n\r\n### Example Output 1\r\n```\r\n3\r\n```\r\n\r\n### Explanation\r\n**Example case 1:** Water can flow from $(1,1)$ down to $(2,1)$, then again down to $(3,1)$, then right to $(3,2)$ and again right to $(3,3)$. Since the initial direction of the pipe from the cell $(3,1)$ is upwards, we need to change it using one operation; after this operation, it is directed right and its capacity is $3$. All other pipes have correct directions. This path gives the maximum possible amount of water, which is $3$.\r\n\r\n### Example Input 2\r\n```\r\n4\r\n1 2 3\r\n5 100\r\nDL\r\n2 1 0\r\n100\r\n5\r\nD\r\nL\r\n1 2 1\r\n10 10\r\nLR\r\n3 3 5\r\n10 20 4\r\n9 8 6\r\n16 15 12\r\nRRD\r\nRDD\r\nLDU\r\n```\r\n\r\n### Example Output 2\r\n```\r\n2\r\n100\r\n0\r\n8\r\n```\r\n\r\n### Example Input 3\r\n```\r\n4\r\n3 3 1000000000\r\n4776 15202 12355\r\n14820 996 21033\r\n32699 5719 31549\r\nULL\r\nLLR\r\nRLD\r\n3 3 1000000000\r\n10475 8939 23763\r\n25687 26437 9851\r\n4998 1101 8817\r\nDRU\r\nLRL\r\nRDD\r\n3 3 1000000000\r\n14671 3820 23657\r\n18786 215 9033\r\n21941 21658 11038\r\nUDU\r\nLRU\r\nLRD\r\n3 3 1000000000\r\n15180 16030 2171\r\n32602 28043 31232\r\n8501 4294 29114\r\nUDR\r\nDLL\r\nRDD\r\n```\r\n\r\n### Example Output 3\r\n```\r\n4775\r\n9848\r\n14669\r\n15179\r\n```\r\n","inputFormat":"","inputFormatState":false,"outputFormat":"","outputFormatState":false,"sampleTestCases":[]},"video_editorial_url":"https:\/\/youtu.be\/YRgjOKhMag0","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, SQLQ, NEM","max_timelimit":"1","source_sizelimit":"50000","problem_author":"rlukaku37","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #684273;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>4&#9733;<\/span><span class='m-username--link'>rlukaku37<\/span>","problem_tester":"","problem_tester_html_handle":"","date_added":"6-03-2021","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/binary-search'>binary-search<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/cook127'>cook127<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/dijkstra-algorithm'>dijkstra-algorithm<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/easy-medium'>easy-medium<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/rlukaku37'>rlukaku37<\/a>","problem_difficulty_level":"Easy-Medium","user_zen_mode":false,"best_tag":"Binary Search","editorial_url":"https:\/\/discuss.codechef.com\/problems\/WATRA","time":{"view_start_date":1616351402,"submit_start_date":1616351402,"visible_start_date":1616351402,"end_date":1735669800,"current":1643797908},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=WATRA","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}