{"category_name":"easy","status":"success","problem_code":"BINFLIP2","problem_name":"Yet Another Flipping Problem 2","body":"This is an example statement in markdown. This is the statement of the problem [TANDC](https:\/\/codechef.com\/problems\/TANDC) on CodeChef. The main statement starts with the next paragraph. Please make sure to remove this paragraph from your statement before publishing your problem. If your problem doesn't contain Subtasks, you should remove the section subtask too. We are using markdown the syntax of which can be seen [at](https:\/\/github.com\/showdownjs\/showdown\/wiki\/Showdown's-Markdown-syntax). We request you to not use any HTML tags in the statement, e.g. no p, ul, li, pre, br or b tags. If you face any issue, please contact admins or email us at help@codechef.com.\n\nTracy is teaching Charlie maths via a game called $N$-Cube, which involves three sections involving $N$.\n\nTracy gives Charlie a number $N$, and Charlie makes a list of $N$-th powers of integers in increasing order $1^N, 2^N, 3^N, \\dot, \\text{so on}$. This teaches him exponentiation.\n\nThen Charlie performs the following subtraction game $N$ times: Take all pairs of consecutive numbers in the list and take their difference. These differences then form the new list for the next iteration of the game. Eg, if $N$ was 6, the list proceeds as $[1, 64, 729, 4096 ... ]$ to $[63, 685, 3367 ...]$, and so on $5$ more times.\n\nAfter the subtraction game, Charlie has to correctly tell Tracy the $N$-th element of the list. This number is the *value of the game*.\n\nAfter practice Charlie became an expert in the game. To challenge him more, Tracy will give two numbers $M$ (where $M$ is a prime) and $R$ instead of just a single number $N$, and the game must start from $M_R - 1$ instead of $N$. Since the *value of the game* can now become large, Charlie just have to tell the largest integer $K$ such that $M_K$ divides this number. Since even $K$ can be large, output $K$ modulo 1000000007 ($10^9 + 7$).\n\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"- $1 \\leq T \\leq 5 \\cdot 10^3$\n- $3 \\leq |S| \\leq 10^5$\n- $S$ contains only characters `'0'` and `'1'`.\n- Sum of $|S|$ over all tests is atmost $10^5$.\n","constraintsState":true,"subtasks":"- 30 points : $1 \\leq R \\leq 10000$\n- 70 points : $1 \\leq R \\leq 10^9$\n","subtasksState":false,"statement":"### Read problem statements in [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/SNCK1B21\/mandarin\/BINFLIP2.pdf) [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/SNCK1B21\/vietnamese\/BINFLIP2.pdf), and [Russian](https:\/\/www.codechef.com\/download\/translated\/SNCK1B21\/russian\/BINFLIP2.pdf)\n\nYou are given a binary string $S$. You would like to make every character of $S$ equal to `'0'`.\n\nTo achieve this goal, you are allowed to perform two types of operations on $S$:\n\n1. Select a substring $T$ of $S$ of length $3$ such that not all characters of $T$ are the same (i.e, $T$ must be one of `\"001\"`, `\"010\"`, `\"011\"`, `\"100\"`, `\"101\"` and `\"110\"`), and flip all its characters (convert `'1'` to `'0'` and `'0'` to `'1'`).\n\n2. Select a single character of $S$ and flip it.\n\nThere is an extra constraint imposed on the operations: The first operation may be of either type, but **no two consecutive operations are allowed to be of the same type.**\n\nGiven $S$, find a way to convert all characters to `'0'` using at most $|S|$ operations or report that it is impossible.\nIt can be proved that if every character of $S$ can be made `'0'`, the conversion can be done using no more than $|S|$ operations.\n\nIf multiple constructions exist, print any of them. In particular, note that you **do not need to minimize** the number of operations used; any conversion using no more than $|S|$ operations will be accepted.\n","inputFormat":"- The first line contains a single integer $T$, denoting the number of testcases. The description of $T$ testcases follows.\n- The first and only line of each testcase contains a string $S$.\n","inputFormatState":true,"outputFormat":"For each testcase, first output a single line containing `\"YES\"` if it is possible to convert the string $S$ to all `'0'`-s; otherwise print `\"NO\"`.\n\nIf the answer is `\"YES\"`, print the number of operations you are going to perform, $X$, on the second line.\n\nThen, if $X \\gt 0$, print $X + 1$ lines describing the operations performed formatted as follows:\n- The first line contains a single integer $1$ or $2$, denoting whether your first operation is of type $1$ or type $2$ respectively.\n- The next $X$ lines describe the operations, where\n    * If you perform a type $1$ operation on the length $3$ substring starting at position $i$, print $i$.\n    * If you perform a type $2$ operation on position $i$, print $i$.\n\nNote that the operations alternate between types $1$ and $2$, with the first operation being of the type you specify.\n\n**The string is assumed to be zero-indexed, so a type $1$ operation must satisfy $0\\leq i\\leq |S|-3$ and a type $2$ operation must satisfy $0\\leq i\\leq |S|-1$.**\n\nYou may print each character of the string in uppercase or lowercase (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be treated as identical).\n\n\nYou will receive a 'Wrong Answer' verdict if any of the following happen:\n* The number of operations is more than $|S|$\n* A type $1$ operation is applied on a substring whose characters are all the same\n* Any operation is performed at an invalid index (valid indices are mentioned above, in bold)\n* After performing all $X$ operations, $S$ still contains a `'1'`","outputFormatState":true,"sampleTestCases":[{"id":"1","input":"3\n010\n110\n1111","output":"YES\n1\n2\n1\nYES\n2\n1\n0\n2\nNO","explanation":"**Test Case $1$:** Perform one type $2$ operation to flip index $1$, with the resulting string being `\"000\"`\n\n**Test Case $2$:** Perform a type $1$ operation on the substring starting at index $0$ to obtain the string `\"001\"`. Then, perform a type $2$ operation on index $2$ to obtain `\"000\"`.\n\n**Test Case $3$:** It can be proved that no sequence of moves exists such that the final string is all zeroes.","isDeleted":false}]},"video_editorial_url":"","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, SQLQ, NEM","max_timelimit":"1","source_sizelimit":"50000","problem_author":"nishant_adm","problem_author_html_handle":"nishant_adm","problem_tester":"","problem_tester_html_handle":"","date_added":"25-10-2021","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/easy-medium'>easy-medium<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/nishant_adm'>nishant_adm<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/snck1b21'>snck1b21<\/a>","problem_difficulty_level":"Unavailable","user_zen_mode":false,"best_tag":"","editorial_url":"https:\/\/discuss.codechef.com\/problems\/BINFLIP2","time":{"view_start_date":1635694200,"submit_start_date":1635694200,"visible_start_date":1635694200,"end_date":1735669800,"current":1643797770},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=BINFLIP2","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}