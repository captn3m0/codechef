{"category_name":"school","status":"success","problem_code":"BOWLERS","problem_name":"Bowling Strategy","body":"### Read problems statements in [Hindi](https:\/\/www.codechef.com\/download\/translated\/COOK122\/hindi\/BOWLERS.pdf), [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/COOK122\/mandarin\/BOWLERS.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/COOK122\/russian\/BOWLERS.pdf), [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/COOK122\/vietnamese\/BOWLERS.pdf), and [Bengali](https:\/\/www.codechef.com\/download\/translated\/COOK122\/bengali\/BOWLERS.pdf) as well.\r\n\r\nIn a cricket game, an *over* is a set of six valid deliveries of balls performed by one player \u2015 the *bowler* for this over.\r\n\r\nConsider a cricket game with a series of $N$ overs (numbered $1$ through $N$) played by $K$ players (numbered $1$ through $K$). Each player may be the bowler for at most $L$ overs in total, but the same player may not be the bowler for any two consecutive overs. Assign exactly one bowler to each over in such a way that these rules are satisfied or determine that no such assignment exists.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first and only line of each test case contains three space-separated integers $N$, $K$ and $L$. \r\n\r\n### Output\r\nFor each test case:\r\n- If there is no valid assignment of bowlers to overs, print a single line containing the integer $-1$.\r\n- Otherwise, print a single line containing $N$ space-separated integers. For each valid $i$, the $i$-th of these integers should be the number of the player assigned as the bowler for the $i$-th over.\r\n\r\n### Constraints \r\n- $1 \\le T \\le 30$\r\n- $1 \\le N, K, L \\le 10,000$\r\n\r\n### Example Input\r\n```\r\n2\r\n4 3 2\r\n5 4 1\r\n```\r\n\r\n### Example Output\r\n```\r\n1 2 3 2\r\n-1\r\n```\r\n\r\n### Explanation\r\n**Example case 1:** The following is a valid assignment:\r\n- Bowler 1 bowls the $1$-st over.\r\n- Bowler 2 bowls the $2$-nd and $4$-th overs.\r\n- Bowler 3 bowls the $3$-rd over.\r\n\r\nIt is valid since no bowler bowls more than $2$ overs and each two consecutive overs have different bowlers.\r\n\r\n**Example case 2:** There is no valid assignment in which each of $4$ players bowls at most $1$ over out of $5$.\r\n\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"","constraintsState":false,"subtasks":"","subtasksState":false,"statement":"### Read problems statements in [Hindi](https:\/\/www.codechef.com\/download\/translated\/COOK122\/hindi\/BOWLERS.pdf), [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/COOK122\/mandarin\/BOWLERS.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/COOK122\/russian\/BOWLERS.pdf), [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/COOK122\/vietnamese\/BOWLERS.pdf), and [Bengali](https:\/\/www.codechef.com\/download\/translated\/COOK122\/bengali\/BOWLERS.pdf) as well.\r\n\r\nIn a cricket game, an *over* is a set of six valid deliveries of balls performed by one player \u2015 the *bowler* for this over.\r\n\r\nConsider a cricket game with a series of $N$ overs (numbered $1$ through $N$) played by $K$ players (numbered $1$ through $K$). Each player may be the bowler for at most $L$ overs in total, but the same player may not be the bowler for any two consecutive overs. Assign exactly one bowler to each over in such a way that these rules are satisfied or determine that no such assignment exists.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first and only line of each test case contains three space-separated integers $N$, $K$ and $L$. \r\n\r\n### Output\r\nFor each test case:\r\n- If there is no valid assignment of bowlers to overs, print a single line containing the integer $-1$.\r\n- Otherwise, print a single line containing $N$ space-separated integers. For each valid $i$, the $i$-th of these integers should be the number of the player assigned as the bowler for the $i$-th over.\r\n\r\n### Constraints \r\n- $1 \\le T \\le 30$\r\n- $1 \\le N, K, L \\le 10,000$\r\n\r\n### Example Input\r\n```\r\n2\r\n4 3 2\r\n5 4 1\r\n```\r\n\r\n### Example Output\r\n```\r\n1 2 3 2\r\n-1\r\n```\r\n\r\n### Explanation\r\n**Example case 1:** The following is a valid assignment:\r\n- Bowler 1 bowls the $1$-st over.\r\n- Bowler 2 bowls the $2$-nd and $4$-th overs.\r\n- Bowler 3 bowls the $3$-rd over.\r\n\r\nIt is valid since no bowler bowls more than $2$ overs and each two consecutive overs have different bowlers.\r\n\r\n**Example case 2:** There is no valid assignment in which each of $4$ players bowls at most $1$ over out of $5$.\r\n","inputFormat":"","inputFormatState":false,"outputFormat":"","outputFormatState":false,"sampleTestCases":[]},"video_editorial_url":"https:\/\/youtu.be\/KIwEvwg5pTs","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, SQLQ, NEM","max_timelimit":"1","source_sizelimit":"50000","problem_author":"smartnj","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;<\/span><span class='m-username--link'>smartnj<\/span>","problem_tester":"","problem_tester_html_handle":"","date_added":"10-09-2020","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/cakewalk'>cakewalk<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/cook122'>cook122<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/rahuldugar'>rahuldugar<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/rishup_nitdgp'>rishup_nitdgp<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/smartnj'>smartnj<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/smartnj'>smartnj<\/a>","problem_difficulty_level":"Cakewalk","user_zen_mode":false,"best_tag":"","editorial_url":"https:\/\/discuss.codechef.com\/problems\/BOWLERS","time":{"view_start_date":1104528600,"submit_start_date":1104528600,"visible_start_date":1104528600,"end_date":1735669800,"current":1643797706},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=BOWLERS","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}