{"category_name":"school","status":"success","problem_code":"MEET","problem_name":"Chef and Meetings","body":"### Read problem statements in [Hindi](https:\/\/www.codechef.com\/download\/translated\/FEB21\/hindi\/MEET.pdf), [Bengali](https:\/\/www.codechef.com\/download\/translated\/FEB21\/bengali\/MEET.pdf), [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/FEB21\/mandarin\/MEET.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/FEB21\/russian\/MEET.pdf), and [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/FEB21\/vietnamese\/MEET.pdf) as well.\r\n\r\nA *time* is a string in the format `\"HH:MM AM\"` or `\"HH:MM PM\"` (without quotes), where `HH` and `MM` are always two-digit numbers. A day starts at 12:00 AM and ends at 11:59 PM. You may refer [here](https:\/\/simple.wikipedia.org\/wiki\/12-hour_clock) for understanding the 12-hour clock format.\r\n\r\nChef has scheduled a meeting with his friends at a time $P$. He has $N$ friends (numbered $1$ through $N$); for each valid $i$, the $i$-th friend is available from a time $L_i$ to a time $R_i$ (both inclusive). For each friend, can you help Chef find out if this friend will be able to attend the meeting? More formally, check if $L_i \\leq P \\leq R_i$ for each valid $i$.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains a single time $P$.\r\n- The second line contains a single integer $N$.\r\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated times $L_i$ and $R_i$.\r\n\r\n### Output\r\nFor each test case, print a single line containing one string with length $N$. For each valid $i$, the $i$-th character of this string should be '1' if $i$-th friend will be able to attend the meeting or '0' otherwise. \r\n\r\n### Constraints \r\n- $1 \\leq T \\leq 500$\r\n- $1 \\leq N \\leq 500$\r\n- each time is valid in the 12-hour clock format\r\n- for each valid $i$, the time $R_i$ is greater or equal to $L_i$\r\n\r\n### Subtasks\r\n**Subtask #1 (100 points):** original constraints\r\n\r\n### Example Input\r\n```\r\n2\r\n12:01 AM\r\n4\r\n12:00 AM 11:42 PM\r\n12:01 AM 11:59 AM\r\n12:30 AM 12:00 PM\r\n11:59 AM 11:59 PM\r\n04:12 PM\r\n5\r\n12:00 AM 11:59 PM\r\n01:00 PM 04:12 PM\r\n04:12 PM 04:12 PM\r\n04:12 AM 04:12 AM\r\n12:00 PM 11:59 PM\r\n```\r\n\r\n### Example Output\r\n```\r\n1100\r\n11101\r\n```\r\n\r\n### Explanation\r\n**Example case 1:** \r\n- Friend $1$: `12:01 AM` lies between `12:00 AM` and `11:42 PM` (that is, between `00:00` and `23:42` in the 24-hour clock format), so this friend will be able to attend the meeting.\r\n- Friend $2$: `12:01 AM` lies between `12:01 AM` and `11:59 AM` (between `00:01` and `11:59` in the 24-hour clock format).\r\n- Friend $3$: `12:01 AM` does not lie between `12:30 AM` and `12:30 PM` (between `00:30` and `12:30` in the 24-hour clock format), so this friend will not be able to attend the meeting.\r\n- Friend $4$: `12:01 AM` does not lie between `11:59 AM` and `11:59 PM` (between `11:59` and `23:59` in the 24-hour clock format).\r\n\r\n**Example case 2:** For friend $3$, `04:12 PM` lies between `04:12 PM` and `04:12 PM` (inclusive) and hence this friend will be able to attend the meeting.\r\n\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"","constraintsState":false,"subtasks":"","subtasksState":false,"statement":"### Read problem statements in [Hindi](https:\/\/www.codechef.com\/download\/translated\/FEB21\/hindi\/MEET.pdf), [Bengali](https:\/\/www.codechef.com\/download\/translated\/FEB21\/bengali\/MEET.pdf), [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/FEB21\/mandarin\/MEET.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/FEB21\/russian\/MEET.pdf), and [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/FEB21\/vietnamese\/MEET.pdf) as well.\r\n\r\nA *time* is a string in the format `\"HH:MM AM\"` or `\"HH:MM PM\"` (without quotes), where `HH` and `MM` are always two-digit numbers. A day starts at 12:00 AM and ends at 11:59 PM. You may refer [here](https:\/\/simple.wikipedia.org\/wiki\/12-hour_clock) for understanding the 12-hour clock format.\r\n\r\nChef has scheduled a meeting with his friends at a time $P$. He has $N$ friends (numbered $1$ through $N$); for each valid $i$, the $i$-th friend is available from a time $L_i$ to a time $R_i$ (both inclusive). For each friend, can you help Chef find out if this friend will be able to attend the meeting? More formally, check if $L_i \\leq P \\leq R_i$ for each valid $i$.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains a single time $P$.\r\n- The second line contains a single integer $N$.\r\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated times $L_i$ and $R_i$.\r\n\r\n### Output\r\nFor each test case, print a single line containing one string with length $N$. For each valid $i$, the $i$-th character of this string should be '1' if $i$-th friend will be able to attend the meeting or '0' otherwise. \r\n\r\n### Constraints \r\n- $1 \\leq T \\leq 500$\r\n- $1 \\leq N \\leq 500$\r\n- each time is valid in the 12-hour clock format\r\n- for each valid $i$, the time $R_i$ is greater or equal to $L_i$\r\n\r\n### Subtasks\r\n**Subtask #1 (100 points):** original constraints","inputFormat":"","inputFormatState":false,"outputFormat":"","outputFormatState":false,"sampleTestCases":[{"id":"1","input":"2\r\n12:01 AM\r\n4\r\n12:00 AM 11:42 PM\r\n12:01 AM 11:59 AM\r\n12:30 AM 12:00 PM\r\n11:59 AM 11:59 PM\r\n04:12 PM\r\n5\r\n12:00 AM 11:59 PM\r\n01:00 PM 04:12 PM\r\n04:12 PM 04:12 PM\r\n04:12 AM 04:12 AM\r\n12:00 PM 11:59 PM","output":"1100\r\n11101","explanation":"**Example case 1:** \r\n- Friend $1$: `12:01 AM` lies between `12:00 AM` and `11:42 PM` (that is, between `00:00` and `23:42` in the 24-hour clock format), so this friend will be able to attend the meeting.\r\n- Friend $2$: `12:01 AM` lies between `12:01 AM` and `11:59 AM` (between `00:01` and `11:59` in the 24-hour clock format).\r\n- Friend $3$: `12:01 AM` does not lie between `12:30 AM` and `12:30 PM` (between `00:30` and `12:30` in the 24-hour clock format), so this friend will not be able to attend the meeting.\r\n- Friend $4$: `12:01 AM` does not lie between `11:59 AM` and `11:59 PM` (between `11:59` and `23:59` in the 24-hour clock format).\r\n\r\n**Example case 2:** For friend $3$, `04:12 PM` lies between `04:12 PM` and `04:12 PM` (inclusive) and hence this friend will be able to attend the meeting.","isDeleted":false}]},"video_editorial_url":"https:\/\/youtu.be\/-QVBgZCtXyM","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, SQLQ, NEM","max_timelimit":"2","source_sizelimit":"50000","problem_author":"smit_adm","problem_author_html_handle":"smit_adm","problem_tester":"","problem_tester_html_handle":"","date_added":"9-01-2021","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/cakewalk'>cakewalk<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/feb21'>feb21<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/implementation'>implementation<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/smit_adm'>smit_adm<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/vichitr'>vichitr<\/a>","problem_difficulty_level":"Cakewalk","user_zen_mode":false,"best_tag":"","editorial_url":"https:\/\/discuss.codechef.com\/problems\/MEET","time":{"view_start_date":1104528600,"submit_start_date":1104528600,"visible_start_date":1104528600,"end_date":1735669800,"current":1643797736},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=MEET","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}