{"category_name":"medium","status":"success","problem_code":"CCNF","problem_name":"Clique Boolean Expression","body":"### Read problem statements in [Bengali](https:\/\/www.codechef.com\/download\/translated\/MARCH21\/bengali\/CCNF.pdf), [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/MARCH21\/mandarin\/CCNF.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/MARCH21\/russian\/CCNF.pdf), and [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/MARCH21\/vietnamese\/CCNF.pdf) as well.\r\n\r\nChef Ada constructed a simple undirected graph $G$ with $N$ vertices (numbered $1$ through $N$) as follows:\r\n\r\n* Start with a [complete graph](https:\/\/en.wikipedia.org\/wiki\/Complete_graph) with $K$ vertices and $K \\cdot (K-1)\/2$ edges.\r\n* Then, add $N-K$ vertices one by one. After adding each vetex, find some [clique](https:\/\/en.wikipedia.org\/wiki\/Clique_(graph_theory)) of $K-1$ vertices in the graph and connect the new vertex to all the vertices of that clique.\r\n\r\nConsider $N$ boolean variables $X_1, X_2, \\ldots, X_N$ and their negations $\\neg X_1, \\neg X_2, \\ldots, \\neg X_N$, corresponding to vertices of the graph. You are given the initial values of all variables.\r\n\r\nA *CNF boolean expression* is defined as a [conjunction](https:\/\/en.wikipedia.org\/wiki\/Logical_conjunction) of clauses, where each clause is a [disjunction](https:\/\/en.wikipedia.org\/wiki\/Logical_disjunction) of two or more elements of the set of variables and their negations.\r\n\r\nUsing the graph $G$, Ada wrote a CNF boolean expression $B$ with $M$ clauses, where each clause corresponds to a clique in the graph with some (maybe none) of the variables (corresponding to vertices) negated. More formally, for each $i$ from $1$ to $M$:\r\n- Ada chose some clique in the graph, consisting of $L_i$ vertices $Z_1, Z_2, \\ldots, Z_{L_i}$\r\n- then for each valid $j$, Ada chose a variable $P_{i,j}$ as either $X_{Z_j}$ or $\\neg X_{Z_j}$\r\n- the $i$-th clause in the expression $B$ had $L_i$ terms: $P_{i,1} \\lor P_{i,2} \\lor \\ldots \\lor P_{i,L_i}$\r\n\r\nAda wants the expression to evaluate to \"true\". In order to achieve that, she may change the values of variables; for each valid $i$, the cost of changing the value of $X_i$ (from \"true\" to \"false\" or vice versa) is $C_i$. Find the minimum total cost needed to make the expression $B$ evaluate to \"true\" or determine that it is impossible.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains three space-separated integers $N$, $M$ and $K$.\r\n- The second line contains a single binary string $S$ with length $N$ describing the initial values of the variables. For each valid $i$, the $i$-th character of $S$ is '1' if $X_i$ is true or '0' if $X_i$ is false.\r\n- The third line contains $N$ space-separated integers $C_1, C_2, \\ldots, C_N$.\r\n- $M$ lines follow. For each valid $i$, the $i$-th of these lines contains an integer $L_i$ followed by a space and $L_i$ space-separated integers representing the variables $P_{i,1}, \\ldots, P_{i,L_i}$. For each valid $i$, the variable $X_i$ is represented by the integer $i$ and its negation is represented by $-i$.\r\n\r\n### Output\r\nFor each test case, print a single line containing one integer \u2015 the minimum cost needed to make the boolean expression evaluate to \"true\", or $-1$ if it is impossible.\r\n\r\n### Constraints\r\n- $1 \\le T \\le 10$\r\n- $1 \\le N, M \\le 144$\r\n- $3 \\le K \\le 9$\r\n- each character of $S$ is either '0' or '1'\r\n- $1 \\le C_i \\le 256$ for each valid $i$\r\n- $1 \\le L_i \\le N$ for each valid $i$\r\n- $1 \\le |P_{i,j}| \\le N$ for each valid $i,j$\r\n\r\n### Subtasks\r\n**Subtask #1 (25 points, time limit 1 second):** $K = 3$\r\n\r\n**Subtask #2 (75 points, time limit 6 seconds):** original constraints\r\n\r\n### Example Input\r\n```\r\n1\r\n5 3 3\r\n00001\r\n1 4 2 3 7\r\n3 1 -2 4\r\n3 2 3 -5\r\n3 1 -3 2\r\n```\r\n\r\n### Example Output\r\n```\r\n3\r\n```\r\n\r\n### Explanation\r\n**Example case 1:** The following figure depicts the graph used to generate the expression.\r\n\r\n<img src=' https:\/\/s3.amazonaws.com\/codechef_shared\/download\/Images\/MARCH21\/CCNF\/CCNF.png'><\/img>\r\n\r\nThe boolean expression is $B = (X_1 \\lor \\neg X_2 \\lor X_4) \\land (X_2 \\lor X_3 \\lor \\neg X_5) \\land (X_1 \\lor \\neg X_3 \\lor X_2)$.\r\n\r\nOne optimal solution is to change the values of $X_1$ and $X_3$.\r\n\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"","constraintsState":false,"subtasks":"","subtasksState":false,"statement":"### Read problem statements in [Bengali](https:\/\/www.codechef.com\/download\/translated\/MARCH21\/bengali\/CCNF.pdf), [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/MARCH21\/mandarin\/CCNF.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/MARCH21\/russian\/CCNF.pdf), and [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/MARCH21\/vietnamese\/CCNF.pdf) as well.\r\n\r\nChef Ada constructed a simple undirected graph $G$ with $N$ vertices (numbered $1$ through $N$) as follows:\r\n\r\n* Start with a [complete graph](https:\/\/en.wikipedia.org\/wiki\/Complete_graph) with $K$ vertices and $K \\cdot (K-1)\/2$ edges.\r\n* Then, add $N-K$ vertices one by one. After adding each vetex, find some [clique](https:\/\/en.wikipedia.org\/wiki\/Clique_(graph_theory)) of $K-1$ vertices in the graph and connect the new vertex to all the vertices of that clique.\r\n\r\nConsider $N$ boolean variables $X_1, X_2, \\ldots, X_N$ and their negations $\\neg X_1, \\neg X_2, \\ldots, \\neg X_N$, corresponding to vertices of the graph. You are given the initial values of all variables.\r\n\r\nA *CNF boolean expression* is defined as a [conjunction](https:\/\/en.wikipedia.org\/wiki\/Logical_conjunction) of clauses, where each clause is a [disjunction](https:\/\/en.wikipedia.org\/wiki\/Logical_disjunction) of two or more elements of the set of variables and their negations.\r\n\r\nUsing the graph $G$, Ada wrote a CNF boolean expression $B$ with $M$ clauses, where each clause corresponds to a clique in the graph with some (maybe none) of the variables (corresponding to vertices) negated. More formally, for each $i$ from $1$ to $M$:\r\n- Ada chose some clique in the graph, consisting of $L_i$ vertices $Z_1, Z_2, \\ldots, Z_{L_i}$\r\n- then for each valid $j$, Ada chose a variable $P_{i,j}$ as either $X_{Z_j}$ or $\\neg X_{Z_j}$\r\n- the $i$-th clause in the expression $B$ had $L_i$ terms: $P_{i,1} \\lor P_{i,2} \\lor \\ldots \\lor P_{i,L_i}$\r\n\r\nAda wants the expression to evaluate to \"true\". In order to achieve that, she may change the values of variables; for each valid $i$, the cost of changing the value of $X_i$ (from \"true\" to \"false\" or vice versa) is $C_i$. Find the minimum total cost needed to make the expression $B$ evaluate to \"true\" or determine that it is impossible.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains three space-separated integers $N$, $M$ and $K$.\r\n- The second line contains a single binary string $S$ with length $N$ describing the initial values of the variables. For each valid $i$, the $i$-th character of $S$ is '1' if $X_i$ is true or '0' if $X_i$ is false.\r\n- The third line contains $N$ space-separated integers $C_1, C_2, \\ldots, C_N$.\r\n- $M$ lines follow. For each valid $i$, the $i$-th of these lines contains an integer $L_i$ followed by a space and $L_i$ space-separated integers representing the variables $P_{i,1}, \\ldots, P_{i,L_i}$. For each valid $i$, the variable $X_i$ is represented by the integer $i$ and its negation is represented by $-i$.\r\n\r\n### Output\r\nFor each test case, print a single line containing one integer \u2015 the minimum cost needed to make the boolean expression evaluate to \"true\", or $-1$ if it is impossible.\r\n\r\n### Constraints\r\n- $1 \\le T \\le 10$\r\n- $1 \\le N, M \\le 144$\r\n- $3 \\le K \\le 9$\r\n- each character of $S$ is either '0' or '1'\r\n- $1 \\le C_i \\le 256$ for each valid $i$\r\n- $1 \\le L_i \\le N$ for each valid $i$\r\n- $1 \\le |P_{i,j}| \\le N$ for each valid $i,j$\r\n\r\n### Subtasks\r\n**Subtask #1 (25 points, time limit 1 second):** $K = 3$\r\n\r\n**Subtask #2 (75 points, time limit 6 seconds):** original constraints","inputFormat":"","inputFormatState":false,"outputFormat":"","outputFormatState":false,"sampleTestCases":[{"id":"1","input":"1\r\n5 3 3\r\n00001\r\n1 4 2 3 7\r\n3 1 -2 4\r\n3 2 3 -5\r\n3 1 -3 2","output":"3","explanation":"**Example case 1:** The following figure depicts the graph used to generate the expression.\r\n\r\n<img src=' https:\/\/s3.amazonaws.com\/codechef_shared\/download\/Images\/MARCH21\/CCNF\/CCNF.png'><\/img>\r\n\r\nThe boolean expression is $B = (X_1 \\lor \\neg X_2 \\lor X_4) \\land (X_2 \\lor X_3 \\lor \\neg X_5) \\land (X_1 \\lor \\neg X_3 \\lor X_2)$.\r\n\r\nOne optimal solution is to change the values of $X_1$ and $X_3$.","isDeleted":false}]},"video_editorial_url":"https:\/\/youtu.be\/wWtAvClbr7Y","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, SQLQ, NEM","max_timelimit":"1 - 6","source_sizelimit":"50000","problem_author":"alei","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #D0011B;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>7&#9733;<\/span><span class='m-username--link'>alei<\/span>","problem_tester":"","problem_tester_html_handle":"","date_added":"2-03-2021","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/2-sat'>2-sat<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/alei'>alei<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/dynamic-programming'>dynamic-programming<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/graphs'>graphs<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/march21'>march21<\/a>","problem_difficulty_level":"Unavailable","user_zen_mode":false,"best_tag":"Dynamic Programming","editorial_url":"https:\/\/discuss.codechef.com\/problems\/CCNF","time":{"view_start_date":1104528600,"submit_start_date":1104528600,"visible_start_date":1104528600,"end_date":1735669800,"current":1643797926},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=CCNF","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}