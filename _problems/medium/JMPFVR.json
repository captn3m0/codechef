{"category_name":"medium","status":"success","problem_code":"JMPFVR","problem_name":"Jumping Fever","body":"### Read problem statements in [Hindi](https:\/\/www.codechef.com\/download\/translated\/LTIME83\/hindi\/JMPFVR.pdf), [Bengali](https:\/\/www.codechef.com\/download\/translated\/LTIME83\/bengali\/JMPFVR.pdf), [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/LTIME83\/mandarin\/JMPFVR.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/LTIME83\/russian\/JMPFVR.pdf), and [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/LTIME83\/vietnamese\/JMPFVR.pdf) as well.\r\n\r\nChef has a tree with $N$ nodes (numbered $1$ through $N$). Each node has a value; let's denote the value of node $i$ by $v_i$. Chef likes to travel in this tree. For each pair of nodes $(u, v)$, he defines the score of the path from $u$ to $v$ in the following way:\r\n- Suppose that the simple path from node $u$ to node $v$ is a sequence of nodes $u = a_0, a_1, \\ldots, a_L = v$, where $L$ is the length of this path.\r\n- Let's denote the values of the nodes on this path by a sequence $A_0, A_1, \\ldots, A_L$, where for each valid $i$, $A_i = v_{a_i}$.\r\n- Next, let's denote the suffix sums of the sequence $A$ by $S_0, S_1, \\ldots, S_L$, i.e. for each valid $i$, $S_i = \\sum_{j=i}^L A_j$.\r\n- The score $f(u, v)$ of the path from node $u$ to node $v$ is the sum of all these suffix sums, i.e. $f(u, v) = \\sum_{i=0}^L S_i$.\r\n\r\nChef wants to choose some nodes $u$ and $v$ ($u \\neq v$) and travel along the simple path from $u$ to $v$. However, he can treat it as several consecutive paths, which affects the score of the resulting trip. Specifically, if the simple path from node $u$ to node $v$ is a sequence of nodes $u = a_0, a_1, \\ldots, a_L = v$, then Chef may choose any non-negative integer $m$ and any sequence $k_1, k_2, \\ldots, k_m$ such that $1 \\le k_1 \\lt k_2 \\lt \\ldots k_m \\lt L$; then, the score of the trip from $u$ to $v$ is $f(u, a_{k_1}) + f(a_{k_1}, a_{k_2}) + \\ldots + f(a_{k_m}, v)$. Specifically, if $m=0$, the score of the trip is simply $f(u, v)$.\r\n\r\nFind the maximum possible score of Chef's trip if the nodes $u$ and $v$ (such that $u \\neq v$) and the sequence $k$ are chosen optimally.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains a single integer $N$.\r\n- The second line contains $N$ space-separated integers $v_1, v_2, \\ldots, v_N$.\r\n- $N-1$ lines follow. Each of these lines contains two space-separated integers $a$ and $b$ denoting that nodes $a$ and $b$ are connected by an edge.\r\n\r\n### Output\r\nFor each test case, print a single line containing one integer \u2015 the maximum possible score.\r\n\r\n### Constraints\r\n- $1 \\le T \\le 100$\r\n- $2 \\le N \\le 3 \\cdot 10^5$\r\n- $|val_i| \\le 10^5$ for each valid $i$\r\n- $1 \\le a, b \\le N$\r\n- the graph described on the input is a tree\r\n- the sum of $N$ over all test cases does not exceed $3 \\cdot 10^5$\r\n\r\n### Subtasks\r\n**Subtask #1 (50 points):** the sum of $N$ over all test cases does not exceed $10^3$\r\n\r\n**Subtask #2 (50 points):** original constraints\r\n\r\n### Example Input\r\n```\r\n1\r\n3\r\n-10 2 4\r\n1 2\r\n1 3\r\n```\r\n\r\n### Example Ouput\r\n```\r\n-2\r\n```\r\n\r\n### Explanation\r\n**Example case 1:** We have $f(1, 2) = -6$, $f(2, 1) = -18$, $f(1, 3) = -2$, $f(3, 1) = -16$, $f(2, 3) = -6$ and $f(3, 2) = -10$. A trip from node $2$ to node $3$ can be split into the paths $2 \\rightarrow 1 \\rightarrow 3$ with score $-20$, and a trip from node $3$ to node $2$ can be split into the paths $3 \\rightarrow 1 \\rightarrow 2$ with score $-22$. Each trip can also be treated as one path. The maximum score is $-2$ for the trip from node $1$ to node $3$.\r\n\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"","constraintsState":false,"subtasks":"","subtasksState":false,"statement":"### Read problem statements in [Hindi](https:\/\/www.codechef.com\/download\/translated\/LTIME83\/hindi\/JMPFVR.pdf), [Bengali](https:\/\/www.codechef.com\/download\/translated\/LTIME83\/bengali\/JMPFVR.pdf), [Mandarin Chinese](https:\/\/www.codechef.com\/download\/translated\/LTIME83\/mandarin\/JMPFVR.pdf), [Russian](https:\/\/www.codechef.com\/download\/translated\/LTIME83\/russian\/JMPFVR.pdf), and [Vietnamese](https:\/\/www.codechef.com\/download\/translated\/LTIME83\/vietnamese\/JMPFVR.pdf) as well.\r\n\r\nChef has a tree with $N$ nodes (numbered $1$ through $N$). Each node has a value; let's denote the value of node $i$ by $v_i$. Chef likes to travel in this tree. For each pair of nodes $(u, v)$, he defines the score of the path from $u$ to $v$ in the following way:\r\n- Suppose that the simple path from node $u$ to node $v$ is a sequence of nodes $u = a_0, a_1, \\ldots, a_L = v$, where $L$ is the length of this path.\r\n- Let's denote the values of the nodes on this path by a sequence $A_0, A_1, \\ldots, A_L$, where for each valid $i$, $A_i = v_{a_i}$.\r\n- Next, let's denote the suffix sums of the sequence $A$ by $S_0, S_1, \\ldots, S_L$, i.e. for each valid $i$, $S_i = \\sum_{j=i}^L A_j$.\r\n- The score $f(u, v)$ of the path from node $u$ to node $v$ is the sum of all these suffix sums, i.e. $f(u, v) = \\sum_{i=0}^L S_i$.\r\n\r\nChef wants to choose some nodes $u$ and $v$ ($u \\neq v$) and travel along the simple path from $u$ to $v$. However, he can treat it as several consecutive paths, which affects the score of the resulting trip. Specifically, if the simple path from node $u$ to node $v$ is a sequence of nodes $u = a_0, a_1, \\ldots, a_L = v$, then Chef may choose any non-negative integer $m$ and any sequence $k_1, k_2, \\ldots, k_m$ such that $1 \\le k_1 \\lt k_2 \\lt \\ldots k_m \\lt L$; then, the score of the trip from $u$ to $v$ is $f(u, a_{k_1}) + f(a_{k_1}, a_{k_2}) + \\ldots + f(a_{k_m}, v)$. Specifically, if $m=0$, the score of the trip is simply $f(u, v)$.\r\n\r\nFind the maximum possible score of Chef's trip if the nodes $u$ and $v$ (such that $u \\neq v$) and the sequence $k$ are chosen optimally.\r\n\r\n### Input\r\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\r\n- The first line of each test case contains a single integer $N$.\r\n- The second line contains $N$ space-separated integers $v_1, v_2, \\ldots, v_N$.\r\n- $N-1$ lines follow. Each of these lines contains two space-separated integers $a$ and $b$ denoting that nodes $a$ and $b$ are connected by an edge.\r\n\r\n### Output\r\nFor each test case, print a single line containing one integer \u2015 the maximum possible score.\r\n\r\n### Constraints\r\n- $1 \\le T \\le 100$\r\n- $2 \\le N \\le 3 \\cdot 10^5$\r\n- $|val_i| \\le 10^5$ for each valid $i$\r\n- $1 \\le a, b \\le N$\r\n- the graph described on the input is a tree\r\n- the sum of $N$ over all test cases does not exceed $3 \\cdot 10^5$\r\n\r\n### Subtasks\r\n**Subtask #1 (50 points):** the sum of $N$ over all test cases does not exceed $10^3$\r\n\r\n**Subtask #2 (50 points):** original constraints\r\n\r\n### Example Input\r\n```\r\n1\r\n3\r\n-10 2 4\r\n1 2\r\n1 3\r\n```\r\n\r\n### Example Ouput\r\n```\r\n-2\r\n```\r\n\r\n### Explanation\r\n**Example case 1:** We have $f(1, 2) = -6$, $f(2, 1) = -18$, $f(1, 3) = -2$, $f(3, 1) = -16$, $f(2, 3) = -6$ and $f(3, 2) = -10$. A trip from node $2$ to node $3$ can be split into the paths $2 \\rightarrow 1 \\rightarrow 3$ with score $-20$, and a trip from node $3$ to node $2$ can be split into the paths $3 \\rightarrow 1 \\rightarrow 2$ with score $-22$. Each trip can also be treated as one path. The maximum score is $-2$ for the trip from node $1$ to node $3$.\r\n","inputFormat":"","inputFormatState":false,"outputFormat":"","outputFormatState":false,"sampleTestCases":[]},"video_editorial_url":"","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM","max_timelimit":"2","source_sizelimit":"50000","problem_author":"sajib_readd","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;<\/span><span class='m-username--link'>sajib_readd<\/span>","problem_tester":null,"problem_tester_html_handle":"","date_added":"20-04-2020","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/convex-hull'>convex-hull<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/dsu-on-tree'>dsu-on-tree<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/ltime83'>ltime83<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/medium-hard'>medium-hard<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/sajib_readd'>sajib_readd<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/taran_1407'>taran_1407<\/a>","problem_difficulty_level":"Medium-Hard","user_zen_mode":false,"best_tag":"Convex Hull","editorial_url":"https:\/\/discuss.codechef.com\/problems\/JMPFVR","time":{"view_start_date":1587834602,"submit_start_date":1587834602,"visible_start_date":1587834602,"end_date":1735669800,"current":1643797951},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=JMPFVR","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}