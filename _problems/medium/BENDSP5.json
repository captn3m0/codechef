{"category_name":"medium","status":"success","problem_code":"BENDSP5","problem_name":"5 - Calculate OR","body":"Given an array $A_1,A_2,\\ldots,A_N$, calling the function $\\texttt{calculate_or}(i)$ (described by the C++ code below) will return the **bitwise OR** of $A_i,A_{i+1},\\ldots,A_N$, albeit quite inefficiently.\r\n\r\n```\r\nint calculate_or (int i) {\r\n\tif (i == N) return A[i];\r\n\tif (calculate_or(i+1) == A[i]) return A[i];\r\n\treturn calculate_or(i+1) | A[i];\r\n}\r\n```\r\n\r\nIn particular, calling $\\texttt{calculate_or}(1)$ will return the bitwise OR of the entire array. Your job is to permute the array $A$ such that calling $\\texttt{calculate_or}(1)$ results in the least possible total number of calls to $\\texttt{calculate_or}(i)$, and then output this number.\r\n\r\n### Input:\r\n\r\n- The first line will contain $T$, the number of test cases. Then $T$ test cases follow.\r\n- Each test case consists of two lines of input in the following form:\r\n\r\n  $N$\r\n\r\n  $A_1, A_2, .... , A_N$\r\n\r\n### Output:\r\n\r\nFor each testcase, output on a new line the least possible total number of calls to $\\texttt{calculate_or}(i)$ when $\\texttt{calculate_or}(1)$ is called over all permutations of the array $A$.\r\n\r\n### Constraints\r\n\r\n- $1 \\leq T \\leq 1000$\r\n- $1 \\leq N \\leq 60$\r\n- $1 \\le A_i \\le 10^6$\r\n\r\nIt is guaranteed that the sum of the maximum element in the array over all testcases doesn't exceed $5\\times10^6$\r\n\r\n###Subtasks\r\n**Subtask #1 (10 points):**\r\n- $1 \\leq T \\leq 100$\r\n- $1 \\leq N \\leq 9$\r\n- $1 \\le A_i \\le 100$\r\n\r\n**Subtask #2 (20 points):**\r\n- $1 \\leq T \\leq 100$\r\n- $1 \\leq N \\leq 15$\r\n- $1 \\le A_i \\le 1000$\r\n\r\n**Subtask #3 (70 points):** original constraints\r\n\r\n\r\n### Sample Input:\r\n\r\n\t2\r\n\t3\r\n\t1 2 3\r\n\t4\r\n\t1 3 3 7\r\n\r\n### Sample Output:\r\n\r\n\t4\r\n\t9\r\n\t\r\n### EXPLANATION:\r\n\r\n**Sample case $1$:** If we leave $A$ unchanged, then the function $\\texttt{calculate_or}(i)$ is called 7 times:\r\n\r\n - 1 time with $i=1$\r\n - 2 times with $i=2$\r\n - 4 times with $i=3$\r\n\r\nIf we permute $A$ such that it becomes $[3, 1, 2]$, then the function is called 4 times: \r\n\r\n - 1 time with $i=1$\r\n - 1 time with $i=2$\r\n - 2 times with $i=3$\r\n\r\nSince 4 is the least possible number that can be achieved, it is the answer.\r\n\r\n**Sample case $2$:** If we leave $A$ unchanged, then the function $\\texttt{calculate_or}(i)$ is called 15 times:\r\n\r\n - 1 time with $i=1$\r\n - 2 times with $i=2$\r\n - 4 times with $i=3$\r\n - 8 times with $i=4$\r\n\r\nIf we permute $A$ such that it becomes $[7,3,1,3]$, then the function is called 9 times: \r\n\r\n - 1 time with $i=1$\r\n - 2 times with $i=2$\r\n - 2 times with $i=3$\r\n - 4 times with $i=4$\r\n\r\nSince 9 is the least possible number that can be achieved, it is the answer.\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"","constraintsState":false,"subtasks":"","subtasksState":false,"statement":"Given an array $A_1,A_2,\\ldots,A_N$, calling the function $\\texttt{calculate_or}(i)$ (described by the C++ code below) will return the **bitwise OR** of $A_i,A_{i+1},\\ldots,A_N$, albeit quite inefficiently.\r\n\r\n```\r\nint calculate_or (int i) {\r\n\tif (i == N) return A[i];\r\n\tif (calculate_or(i+1) == A[i]) return A[i];\r\n\treturn calculate_or(i+1) | A[i];\r\n}\r\n```\r\n\r\nIn particular, calling $\\texttt{calculate_or}(1)$ will return the bitwise OR of the entire array. Your job is to permute the array $A$ such that calling $\\texttt{calculate_or}(1)$ results in the least possible total number of calls to $\\texttt{calculate_or}(i)$, and then output this number.\r\n\r\n### Input:\r\n\r\n- The first line will contain $T$, the number of test cases. Then $T$ test cases follow.\r\n- Each test case consists of two lines of input in the following form:\r\n\r\n  $N$\r\n\r\n  $A_1, A_2, .... , A_N$\r\n\r\n### Output:\r\n\r\nFor each testcase, output on a new line the least possible total number of calls to $\\texttt{calculate_or}(i)$ when $\\texttt{calculate_or}(1)$ is called over all permutations of the array $A$.\r\n\r\n### Constraints\r\n\r\n- $1 \\leq T \\leq 1000$\r\n- $1 \\leq N \\leq 60$\r\n- $1 \\le A_i \\le 10^6$\r\n\r\nIt is guaranteed that the sum of the maximum element in the array over all testcases doesn't exceed $5\\times10^6$\r\n\r\n###Subtasks\r\n**Subtask #1 (10 points):**\r\n- $1 \\leq T \\leq 100$\r\n- $1 \\leq N \\leq 9$\r\n- $1 \\le A_i \\le 100$\r\n\r\n**Subtask #2 (20 points):**\r\n- $1 \\leq T \\leq 100$\r\n- $1 \\leq N \\leq 15$\r\n- $1 \\le A_i \\le 1000$\r\n\r\n**Subtask #3 (70 points):** original constraints\r\n\r\n\r\n### Sample Input:\r\n\r\n\t2\r\n\t3\r\n\t1 2 3\r\n\t4\r\n\t1 3 3 7\r\n\r\n### Sample Output:\r\n\r\n\t4\r\n\t9\r\n\t\r\n### EXPLANATION:\r\n\r\n**Sample case $1$:** If we leave $A$ unchanged, then the function $\\texttt{calculate_or}(i)$ is called 7 times:\r\n\r\n - 1 time with $i=1$\r\n - 2 times with $i=2$\r\n - 4 times with $i=3$\r\n\r\nIf we permute $A$ such that it becomes $[3, 1, 2]$, then the function is called 4 times: \r\n\r\n - 1 time with $i=1$\r\n - 1 time with $i=2$\r\n - 2 times with $i=3$\r\n\r\nSince 4 is the least possible number that can be achieved, it is the answer.\r\n\r\n**Sample case $2$:** If we leave $A$ unchanged, then the function $\\texttt{calculate_or}(i)$ is called 15 times:\r\n\r\n - 1 time with $i=1$\r\n - 2 times with $i=2$\r\n - 4 times with $i=3$\r\n - 8 times with $i=4$\r\n\r\nIf we permute $A$ such that it becomes $[7,3,1,3]$, then the function is called 9 times: \r\n\r\n - 1 time with $i=1$\r\n - 2 times with $i=2$\r\n - 2 times with $i=3$\r\n - 4 times with $i=4$\r\n\r\nSince 9 is the least possible number that can be achieved, it is the answer.","inputFormat":"","inputFormatState":false,"outputFormat":"","outputFormatState":false,"sampleTestCases":[]},"video_editorial_url":"","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, SQLQ, NEM","max_timelimit":"2","source_sizelimit":"50000","problem_author":"admin3","problem_author_html_handle":"admin3","problem_tester":"","problem_tester_html_handle":"","date_added":"29-06-2020","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/admin3'>admin3<\/a>","problem_difficulty_level":"Unavailable","user_zen_mode":false,"best_tag":"","editorial_url":"","time":{"view_start_date":1605438000,"submit_start_date":1605438000,"visible_start_date":1605438000,"end_date":1735669800,"current":1643797921},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=BENDSP5","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}