{"category_name":"medium","status":"success","problem_code":"STQ","problem_name":"Strange Queries","body":"### Read problems statements in [Russian](https:\/\/www.codechef.com\/download\/translated\/COOK133\/russian\/STQ.pdf).\n\nYou are given an array $A$ of $N$ positive integers. You are allowed to perform any of the following operations any number of times:\n\n- Pick an index $i$ ($1 \\le i \\le n$), and a prime number $p$. Assign $A_i \\times p$ to $A_i$.\n- Pick an index $i$ ($1 \\le i \\le n$), and a prime number $p$ such that $A_i$ is divisible by $p$. Assign $A_i \\div p$ to $a_i$.\n\nThe goal is to make all the numbers in array equal using the minimum number of operations. Among all sequences of operations using the minimum number of operations, denote $S$ to be the **smallest** final value of all elements in $A$. You are given $Q$ queries of the form $(L_{i}, R_{i})$. For each query, you need to calculate the $S$ value of the contiguous subarray $A_{L_i \\ldots R_i}$.\n<aside style='background: #f8f8f8;padding: 10px 15px;'><div>All submissions for this problem are available.<\/div><\/aside>","problemComponents":{"constraints":"- $1 \\leq N \\leq 10^{6}$\n- $1 \\leq Q \\leq 2 \\cdot 10^{5}$\n- $1 \\leq L_{i} \\leq R_{i} \\leq N$\n- $1 \\leq A_i \\leq 10^{6}$\n","constraintsState":true,"subtasks":"- 30 points : $1 \\leq R \\leq 10000$\n- 70 points : $1 \\leq R \\leq 10^9$\n","subtasksState":false,"statement":"### Read problems statements in [Russian](https:\/\/www.codechef.com\/download\/translated\/COOK133\/russian\/STQ.pdf).\n\nYou are given an array $A$ of $N$ positive integers. You are allowed to perform any of the following operations any number of times:\n\n- Pick an index $i$ ($1 \\le i \\le n$), and a prime number $p$. Assign $A_i \\times p$ to $A_i$.\n- Pick an index $i$ ($1 \\le i \\le n$), and a prime number $p$ such that $A_i$ is divisible by $p$. Assign $A_i \\div p$ to $a_i$.\n\nThe goal is to make all the numbers in array equal using the minimum number of operations. Among all sequences of operations using the minimum number of operations, denote $S$ to be the **smallest** final value of all elements in $A$. You are given $Q$ queries of the form $(L_{i}, R_{i})$. For each query, you need to calculate the $S$ value of the contiguous subarray $A_{L_i \\ldots R_i}$.","inputFormat":"- The first line contains $N$ and $Q$ denoting the number of elements in the array and number of queries.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$ denoting the given array.\n- $Q$ lines follow. The $i$-th line contains two space-separated integers $L_{i}$ and $R_{i}$ denoting the $i$-th query.\n","inputFormatState":true,"outputFormat":"For each query, output the value $S$ for the subarray on a single line.\n","outputFormatState":true,"sampleTestCases":[{"id":"1","input":"4 2\n19 7 11 77\n2 4\n3 4","output":"77\n11","explanation":"- For the first query, there is only one sequence of operations that uses $2$ operations:\n\n    - Choose $i = 2$ and $p = 11$, assign $A_2 \\times 11 = 77$ to $A_2$.\n    - Choose $i = 3$ and $p = 7$, assign $A_3 \\times 7 = 77$ to $A_3$.\n\nWe can prove that there aren't any sequence of operations that uses $1$ operation, so the above sequence uses the least number of operations. The final $S$ value is $77$.\n\n- For the second query, there are two sequences of operations that uses $2$ operations. Those are:\n\n    - Choose $i = 3$ and $p = 7$, assign $A_3 \\times 7 = 77$ to $A_3$.\n    - Choose $i = 4$ and $p = 7$, assign $A_4 \\div 7 = 11$ to $A_4$.\n\nBoth of them are optimal in terms of number of operations. The first sequence of operations has the final value $S$ to be $77$, and the second sequence of operations has the final value $S$ to be $11$. Therefore, the answer to this query is $11$ (we need to minimize the final value $S$).","isDeleted":false}]},"video_editorial_url":"","languages_supported":"CPP14, C, JAVA, PYTH 3.6, CPP17, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, kotlin, BASH, JS, LISP sbcl, rust, PAS gpc, BF, CLOJ, R, D, CAML, FORT, ASM, swift, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, ICK, NICE, PRLG, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, SQLQ, NEM","max_timelimit":"3","source_sizelimit":"50000","problem_author":"nots0fast","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;<\/span><span class='m-username--link'>nots0fast<\/span>","problem_tester":"","problem_tester_html_handle":"","date_added":"14-09-2021","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/cook133'>cook133<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/cook133'>cook133<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/hard'>hard<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/hard'>hard<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/nots0fast'>nots0fast<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/number-theory'>number-theory<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/number-theory'>number-theory<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/probability'>probability<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/probability'>probability<\/a>","problem_difficulty_level":"Unavailable","user_zen_mode":false,"best_tag":"Number Theory","editorial_url":"https:\/\/discuss.codechef.com\/problems\/STQ","time":{"view_start_date":1632078002,"submit_start_date":1632078002,"visible_start_date":1632078002,"end_date":1735669800,"current":1643797980},"user":{"username":null,"access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false,"problemDiscussURL":"https:\/\/discuss.codechef.com\/search?q=STQ","is_proctored":false,"is_user_verified_for_proctoring":null,"visitedContests":[]}